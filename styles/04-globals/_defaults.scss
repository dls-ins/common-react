@use 'sass:color';
@use 'sass:math';
@import '../globals';

@if $debug {
    @debug Font Sizes get-theme-field(font-sizes);
    @debug Spaces get-theme-field(spaces);
    @debug Colors get-theme-field(colors);
}

@import '../include-media';

$m: null;
$sindex: 0;
// Either
@function append-media($name) {
    @return if($m, #{$name}-#{$m}, $name);
}
// Repeats the spaces
@mixin repeat_space($name) {
    $sindex: 0;
    @each $space in get-theme-field(spaces) {
        $n: append-media(#{$name}-#{$sindex});

        #{$n} {
            @content ($space);
        }

        $sindex: $sindex + 1;
    }
}

.col::before,
.col::after {
    display: block;
    content: ' ';
    clear: both;
}

@mixin repeat_class {
    // *** Margin
    @include repeat_space('.margin') using ($space) {
        margin: $space;
    }
    @include repeat_space('.margin-h') using ($space) {
        margin-right: $space;
        margin-left: $space;
    }
    @include repeat_space('.margin-v') using ($space) {
        margin-top: $space;
        margin-bottom: $space;
    }
    @include repeat_space('.margin-top') using ($space) {
        margin-top: $space;
    }
    @include repeat_space('.margin-bottom') using ($space) {
        margin-bottom: $space;
    }
    @include repeat_space('.margin-left') using ($space) {
        margin-left: $space;
    }
    @include repeat_space('.margin-right') using ($space) {
        margin-right: $space;
    }
    // --- Margin

    // *** Padding
    @include repeat_space('.padding') using ($space) {
        padding: $space;
    }
    @include repeat_space('.padding-h') using ($space) {
        padding-left: $space;
        padding-right: $space;
    }
    @include repeat_space('.padding-v') using ($space) {
        padding-top: $space;
        padding-bottom: $space;
    }
    @include repeat_space('.padding-top') using ($space) {
        padding-top: $space;
    }
    @include repeat_space('.padding-bottom') using ($space) {
        padding-bottom: $space;
    }
    @include repeat_space('.padding-left') using ($space) {
        padding-left: $space;
    }
    @include repeat_space('.padding-right') using ($space) {
        padding-right: $space;
    }
    // --- Padding

    // *** Border Radius
    @include repeat_space('.border-radius-top') using ($space) {
        border-top-right-radius: $space;
        border-top-left-radius: $space;
    }
    @include repeat_space('.border-radius-top-right') using ($space) {
        border-top-right-radius: $space;
        // border-top-left-radius: $space;
    }
    @include repeat_space('.border-radius-right') using ($space) {
        border-top-right-radius: $space;
        border-bottom-right-radius: $space;
    }
    @include repeat_space('.border-radius-bottom') using ($space) {
        border-bottom-left-radius: $space;
        border-bottom-right-radius: $space;
    }
    @include repeat_space('.border-radius-left') using ($space) {
        border-top-left-radius: $space;
        border-bottom-left-radius: $space;
    }
    // --- Border Radius

    // Define the columns
    @for $i from 0 through 12 {
        $n: '.col-#{$i}';
        $n: if($m, #{$n}-#{$m}, $n);

        #{$n} {
            float: left;
            width: math.div(100%, 12) * $i;
        }
    }

    @if ($m == null) {
        // For all slectors that use $space but don't need media changes
        @include repeat_space('.border-radius') using ($space) {
            border-radius: $space;
        }
    }

    // Define show and hide
    $n: '.show';
    $n: if($m, #{$n}-#{$m}, $n);
    #{$n} {
        display: unset;
    }
    $n: '.hide';
    $n: if($m, #{$n}-#{$m}, $n);
    #{$n} {
        display: none;
    }
}

@include repeat_class;
@each $bp_name, $bp_value in $breakpoints {
    $m: $bp_name;
    // Loops from smallest to highest pixel size in media
    // We start from smallest to highest in creating websites, create
    @include media('>#{$bp_name}') {
        @include repeat_class;
    }
}

@include use-theme-with-default using ($ts) {
    #{$ts}.shadow {
        box-shadow: 0 0 10px 0 #{color.change(invert(get-color(background)), $alpha: 0.2)};
    }
    #{$ts}.shadow-bottom {
        box-shadow: 0 0.2em 0.3em 0.2em #{color.change(invert(get-color(background)), $alpha: 0.15)};
    }
    #{$ts}.shadow-small {
        box-shadow: 0 0 7px 0 #{color.change(invert(get-color(background)), $alpha: 0.15)};
    }
    @include use-color using ($cn, $c) {
        #{$ts}.#{$cn} {
            color: get-color($cn);
        }
        #{$ts}.#{$cn}-active {
            @include active-color($cn);
        }
        #{$ts}.#{$cn}-border {
            border: 1px solid get-color($cn);
        }
        #{$ts}.#{$cn}-active.#{$cn}-border {
            &:hover {
                border: 1px solid get-color($cn, get-theme-field(shades, hover));
            }
            &:active {
                border: 1px solid get-color($cn, get-theme-field(shades, active));
            }
            &:disabled {
                border: 1px solid get-color($cn, get-theme-field(shades, disabled));
            }
        }

        $bc: get-color($cn, $alpha: 0.7);
        // WIll set background and text
        #{$ts}.#{$cn}-background {
            @include background-color($bc);
        }
        @for $i from 1 through 10 {
            #{$ts}.#{$cn}-background-#{$i} {
                @include background-color(get-color($cn, $alpha: math.div($i, 10)));
            }
        }
        // WIll set background and text, also for hover and active
        #{$ts}.#{$cn}-background-active {
            @include backgound-active-color($bc);
        }
        // WIll set background and text, also for hover and active, but will also set text color
        #{$ts}.#{$cn}-background-active-text {
            @include backgound-active-color($bc, $color-text: true);
        }
    }

    #{$ts}.root {
        transition: background 0.3s;
        font-size: get-font-size(html);
        // line-height: 1.5em;
        min-height: 100vh;
        // overflow: hidden;
        @include background-color(background);
        // To make styling of themes more effective
        .root-background-color,
        option {
            @include background-color(background);
        }
    }
}
